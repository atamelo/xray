{ #example config WS + WG + DNS
    "log": {
        "loglevel": "warning"
        #,
        #"dnsLog": true
    },
    "dns": {
      "servers": [
        {
          "tag": "warp-bootstrap-dns", # for versions >= 25.3
          "address": "66.66.66.66", # fake DNS to easily distinguish the "bootstrap" dns query in the rules
          "port": 6666,
          "domains": ["domain:cloudflareclient.com"], # for this domain only
          "skipFallback": true, # important - since this entry is the first (== default) in the "servers" list
          # we need to set skipFallback = true so that (1) domains other than specified in the "domains"
          # won't get matched by this server (2) domains in the "domains" list will only be resolved
          # using  this (fake) DNS server address (later to be overridden in the rules)
          "queryStrategy": "UseIPv4"
        }
        ,
        {
          # all other DNS queries will be server by this DNS server
          "address": "9.9.9.10",
          "port": 53,
          "queryStrategy": "UseIPv4"
        }
      ],
      "disableFallback": false, # for the above logic to work this has to remain "false"
      "disableFallbackIfMatch": true, # it's importand to turn it off, otherwise DNS requests will be sent not only to the fake 66.66.66.66 but also to others
      "queryStrategy": "UseIPv4"
    },
    "inbounds": [
        {
            "listen": "<>",
            "port": 443,
            "protocol": "vless",
            "tag": "reality-in",
            "settings": {
                "clients": [
                    {
                        "id": "<>",
                        "email": "user-one"
                         #,
                        #"flow": "xtls-rprx-vision"
                    }
                ],
                "decryption": "none",
                "fallbacks": [
                    {
                        "path": "/<path>", # note the leading / !!
                        "dest": "@vless-ws",
                        "xver": 1
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp"
                 ,
                "security": "tls",
                "tlsSettings": {
                    "serverName": "<SNI>",
                    "alpn": [
                        "h2",
                        "http/1.1"
                    ],
                    "certificates": [
                        { # CF's certs will do if we put it behind CF's CDN
                            "certificateFile": "<>",
                            "keyFile": "<>"
                        }
                    ]
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "quic"
                ]
            }
        },
        {
        #"port": 8086,
        #"listen": "127.0.0.1",
            "listen": "@vless-ws",
            "protocol": "vless",
            "tag": "ws-in",
            "settings": {
                "clients": [
                    {
                        "id": "<>",
                        "email": "user-one"
                    }
                ],
                "decryption": "none"
            },
            "streamSettings": {
                "network": "ws",
                "security": "none",
                "wsSettings": {
                    "acceptProxyProtocol": true,
                    "path": "<path>" # no leading / !!
                }
            },
            "sniffing": {
                "enabled": true,
                "destOverride": [
                    "quic",
                    "http",
                    "tls"
                ]
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "wireguard",
            "tag": "warp",
            "settings": {
                "secretKey": "<>",
                "address": [
                    "172.16.0.2/32",
                    "2606:4700:110:8130:7b85:4242:1f59:6db1/128"
                ],
                "peers": [
                    {
                        "endpoint": "engage.cloudflareclient.com:2408", #"162.159.192.1:2408"
                        "publicKey": "<>"
                    }
                ],
                "mtu": 1280,
                "workers": 2,
                "domainStrategy": "ForceIP"
            }
        },
        {
            "protocol": "freedom",
            "tag": "direct"
        },
        {
            "protocol": "blackhole",
            "tag": "block"
        },
        {
            "protocol": "dns",
            "tag": "dns-direct",
            "settings": {
              "address": "9.9.9.9", # override all plain DNS traffic to go to 9.9.9.9
              "port": 53,
              "nonIPQuery": "skip"
            },
            "proxySettings": {
              "tag": "direct"
          }
        },
        {
            "protocol": "dns",
            "tag": "dns-warp",
            "settings": {
              "address": "9.9.9.10", # override all plain DNS traffic to go to 9.9.9.10
              "port": 53,
              "nonIPQuery": "skip"
            },
            "proxySettings": {
              "tag": "warp"
          }
        }
    ],
    "routing": {
        "rules": [
            {
                "type": "field",
                "protocol": "bittorrent",
                "outboundTag": "block"
            },
            {
                "type": "field",
                # "network": "tcp,udp", # this is only needed for version < 25.3
                # "port": 6666,
                # "ip": "66.66.66.66",
                "inboundTag": "warp-bootstrap-dns", # trying to resolve CF's WG endpoint name ?
                "outboundTag": "dns-direct" # if so, we need to let it out the "direct"
            },
            {
                "type": "field",
                "network": "tcp,udp",
                "port": 53,
                "outboundTag": "dns-warp" # all plain DNS traffic is explicitly directed to WARP 
                # (with a DNS server address override)
            },
            {
                "type": "field",
                "user": ["user-one"],
                "outboundTag": "warp"
            },
            {
                "type": "field",
                "domain": [
                    "geosite:openai",
                    "geosite:category-gov-ru",
                    "domain:ru"
                ],
                "outboundTag": "warp"
            },
            {
                "type": "field",
                "ip": [
                    "geoip:ru"
                ],
                "outboundTag": "warp"
            }
        ],
        "domainStrategy": "IPIfNonMatch"
    }
}
